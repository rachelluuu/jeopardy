{"version":3,"sources":["components/LoadingComponent.js","components/FilterBarComponent.js","components/LoadMoreComponent.js","components/SearchComponent.js","components/PlayComponent.js","shared/helper.js","components/QADetailComponent.js","components/HeaderComponent.js","components/FooterComponent.js","shared/baseUrl.js","redux/ActionCreators.js","redux/ActionTypes.js","components/MainComponent.js","redux/reducers.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["Loading","msg","className","FilterBar","props","startDateChanged","date","setHours","setMinutes","setSeconds","setState","searchEnabled","startDate","endDateChanged","endDate","searchClicked","appProps","fetchQAs","state","offset","catToggled","bind","valToggled","catSelected","valSelected","catDropdownOpen","valDropdownOpen","catId","qas","catTitle","value","this","prevState","e","t","currentTarget","innerText","f","catTitle2IdMap","get","getText","parseInt","fqas","data","filter","qa","category","id","airdate","Map","map","title","catItems","Array","from","entries","sort","a","b","cat","DropdownItem","key","onClick","valItems","val","Dropdown","isOpen","toggle","DropdownToggle","caret","color","DropdownMenu","divider","popperPlacement","placeholderText","maxDate","Date","isClearable","selected","onChange","minDate","Button","disabled","length","React","Component","LoadMore","clicked","preventDefault","isLoading","RenderQAItem","to","Card","CardHeader","CardBody","question","Search","errMess","selectedCatId","selectedVal","selectedStartDate","selectedEndDate","catValQas","qaItems","Math","min","max","row","CategoryBar","cats","Play","catQAs","results","r","c","i","push","getFormattedDate","year","getFullYear","getMonth","toString","padStart","getDate","RenderQA","answer","QADetail","Header","toggleNav","isNavOpen","Navbar","dark","expand","fixed","NavbarToggler","NavbarBrand","href","src","alt","Collapse","navbar","Nav","NavItem","Footer","serviceUrl","fetchCatQAs","dispatch","fetch","then","response","ok","error","Error","status","statusText","message","json","addCatQAs","catch","qasFailed","qasLoading","type","payload","errmess","addQAs","q","catLoading","addCats","Main","fetchCats","TransitionGroup","CSSTransition","location","classNames","timeout","exact","path","component","match","params","qaId","withRouter","connect","url","console","log","random","n","clues_count","slice","QAs","action","oldQs","newQs","concat","Cats","CatQAs","store","createStore","combineReducers","applyMiddleware","thunk","logger","App","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cde9389f.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Loading = ({msg}) => {\n    return(\n        <div className=\"col-12\">\n            <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\"></span>\n            <p>Loading {msg}. . .</p>\n        </div>\n    );\n};","import React from 'react';\nimport { Button, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css'\n\n// Contains the React Components for searching by category, value, and date\nclass FilterBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.catToggled = this.catToggled.bind(this);\n    this.valToggled = this.valToggled.bind(this);\n    this.catSelected = this.catSelected.bind(this);\n    this.valSelected = this.valSelected.bind(this);\n    this.startDateChanged = this.startDateChanged.bind(this);\n    this.endDateChanged = this.endDateChanged.bind(this);\n    this.searchClicked = this.searchClicked.bind(this);\n    this.state = {\n      catDropdownOpen: false,\n      valDropdownOpen: false,\n      searchEnabled: false,\n      catId: props.appProps.qas.catId, // thse are important since a new component seems to be created\n      catTitle: props.appProps.qas.catTitle,\n      value: props.appProps.qas.value,\n      startDate: props.appProps.qas.startDate,\n      endDate: props.appProps.qas.endDate\n    };\n  }\n\n  //Update the category and value dropdowns based on user selections\n  catToggled() {\n    this.setState(prevState => ({ catDropdownOpen: !prevState.catDropdownOpen }));\n  }\n  valToggled() {\n    this.setState(prevState => ({ valDropdownOpen: !prevState.valDropdownOpen }));\n  }\n\n  getText(e) {\n    const t = e.currentTarget.innerText;\n    return t === 'Clear' ? null : t; // Clear means reset to search for all\n  }\n\n  catSelected(e, f) {\n    this.setState({\n      searchEnabled: true,\n      catId: this.catTitle2IdMap.get(this.getText(e)),\n      catTitle: this.getText(e)\n    });\n  }\n\n  valSelected(e) {\n    this.setState({\n      searchEnabled: true,\n      value: (this.getText(e) && parseInt(this.getText(e), 10)) || null\n    });\n  }\n\n  //Update the start and end date based on user selections\n  startDateChanged = date => {\n    if (date) {\n      date.setHours(0);\n      date.setMinutes(0);\n      date.setSeconds(0);\n    }\n    this.setState({ searchEnabled: true, startDate: date });\n  };\n\n  endDateChanged = date => {\n    if (date) {\n      date.setHours(23);\n      date.setMinutes(59);\n      date.setSeconds(59);\n    }\n    this.setState({ searchEnabled: true, endDate: date });\n  };\n\n  //Search for the results, given the category, value, and/or dates supplied\n  searchClicked = () => {\n    this.props.appProps.fetchQAs({ ...this.state, offset: 0 });\n  };\n\n  // display the most recent search query in the filter bar\n  render() {\n    const qas = this.props.appProps.qas;\n    const fqas = qas.data.filter((qa) => (\n      (!qas.category || qas.category === qa.category.id) &&\n      (!qas.value || qas.value === qa.value) &&\n      (!qas.startDate || qa.airdate >= qas.startDate) &&\n      (!qas.endDate || qa.airdate <= qas.endDate)\n    ));\n\n    this.catTitle2IdMap = new Map(fqas.map(qa => [qa.category.title, qa.category.id]));\n    const sortedCategories = Array.from(this.catTitle2IdMap.entries()).sort((a, b) => (a[0] > b[0] ? 1 : -1));\n    const catItems = sortedCategories.map((cat) => (\n      <DropdownItem key={cat[0]} onClick={this.catSelected}>{cat[0]}</DropdownItem>\n    ));\n\n    const values = [100, 200, 400, 800, 1000];\n    const valItems = values.map((val) => (\n      <DropdownItem key={val} onClick={this.valSelected}>{val}</DropdownItem>\n    ));\n\n    return (\n      <div className='filterBar row'>\n        <Dropdown isOpen={this.state.catDropdownOpen} toggle={this.catToggled}>\n          <DropdownToggle className='filterBtn' caret color='primary'> Category {this.state.catTitle}</DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem key='clear' onClick={this.catSelected}>Clear</DropdownItem>\n            <DropdownItem divider />\n            {catItems}\n          </DropdownMenu>\n        </Dropdown>\n        <Dropdown isOpen={this.state.valDropdownOpen} toggle={this.valToggled}>\n          <DropdownToggle className='filterBtn' caret color='primary'> Value {this.state.value || ''}</DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem key='clear' onClick={this.valSelected}>Clear</DropdownItem>\n            <DropdownItem divider />\n            {valItems}\n          </DropdownMenu>\n        </Dropdown>\n        <div className='dateRangePicker'>\n          <DatePicker className='filterBtn startDatePicker' popperPlacement='top' placeholderText='Start air date'\n            maxDate={this.state.endDate ? this.state.endDate : new Date()} isClearable selected={this.state.startDate}\n            onChange={this.startDateChanged} />\n          <DatePicker className='filterBtn endDatePicker' popperPlacement='top' placeholderText='End air date'\n            minDate={this.state.startDate ? this.state.startDate : null} maxDate={new Date()} isClearable selected={this.state.endDate}\n            onChange={this.endDateChanged} />\n        </div>\n        <Button className='filterBtn searchBtn' color='primary' disabled={!this.state.searchEnabled} onClick={this.searchClicked}>Search</Button>\n        <div className='cardTotal'>Showing {fqas.length} Questions</div>\n      </div>\n    );\n  }\n}\n\nexport default FilterBar;","import React from 'react';\nimport { Button } from 'reactstrap';\n\nclass LoadMore extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clicked = this.clicked.bind(this);\n  }\n\n  clicked(e) {\n    e.preventDefault();\n    const f = {...this.props.appProps.qas};\n    f.offset = f.offset ? f.offset+100 : 100;\n    this.props.appProps.fetchQAs(f);\n  }\n\n  render() {\n    return (\n      <Button className=\"moreButton\" onClick={this.clicked} disabled={this.props.appProps.qas.isLoading} > \n        {this.props.appProps.qas.isLoading ? \"Loading...\" : \"More...\" }\n      </Button>\n    );\n  }\n}\n\nexport default LoadMore;","import React from 'react';\nimport { Card, CardBody, CardHeader } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Loading } from './LoadingComponent';\nimport FilterBar from './FilterBarComponent';\nimport LoadMore from './LoadMoreComponent';\n\n// Show the category and question on the Search page\nconst RenderQAItem = ({ qa }) => (\n    <Link to={`/search/${qa.id}`} >\n        <Card className=\"questionCard\">\n            <CardHeader className=\"questionCategory\">{qa.category.title}</CardHeader>\n            <CardBody className=\"question\">{qa.question}</CardBody>\n        </Card>\n    </Link>\n);\n\n// Show the corresponding search results based on the user-inputed search parameters\nconst Search = ({ appProps }) => {\n    if (appProps.qas.isLoading && !appProps.qas.data)\n        return (<div className=\"row\"><Loading /> </div>);\n\n    if (appProps.qas.errMess)\n        return (<div className=\"col-12\"> <h4>{appProps.qas.errMess}</h4> </div>);\n\n    const selectedCatId = appProps.qas.category;\n    const selectedVal = appProps.qas.value;\n    const selectedStartDate = appProps.qas.startDate;\n    const selectedEndDate = appProps.qas.endDate;\n    const catValQas = appProps.qas.data.filter((qa) => (\n        (!selectedCatId || selectedCatId === qa.category.id) &&\n        (!selectedVal || selectedVal === qa.value)));\n    const results = catValQas.filter((qa) => (\n        (!selectedStartDate || qa.airdate >= selectedStartDate) &&\n        (!selectedEndDate || qa.airdate <= selectedEndDate)));\n    const qaItems = results.map((qa) => (\n        <div className=\"questionTile col-lg-3 col-md-6 col-12\" key={qa.id}>\n            <RenderQAItem qa={qa} />\n        </div>));\n    return (\n        <div className=\"questionBoard\">\n            <FilterBar appProps={appProps} minDate={new Date(Math.min(...catValQas.map(qa => qa.airdate)))} maxDate={new Date(Math.max(...catValQas.map(qa => qa.airdate)))} />\n            <div className=\"row\">\n                {qaItems}\n            </div>\n            <div className=\"row\">\n                <LoadMore appProps={appProps} />\n            </div>\n        </div>\n    );\n}\n\nexport default Search;","import React from 'react';\nimport { Card, CardBody } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Loading } from './LoadingComponent';\n\n// Display the quetion boxes in all the rows except the top row of the gameboard\nconst RenderQAItem = ({ catId, row, qa }) => (\n    <div className=\"playTile col-2\" key={catId + '.' + row}>\n        <Link to={`/play/${catId}/${row}`} >\n            <Card className=\"playCard\">\n                <CardBody className=\"playValue\">${qa.value}</CardBody>\n            </Card>\n        </Link>\n    </div>\n);\n\n// Display the category boxes in the top row of the game board.\nconst CategoryBar = ({ cats }) => cats.map((cat) => (\n    <div className=\"playTile col-2\" key={cat.id}>\n        <Card className=\"playCard\">\n            <CardBody className=\"playCategory\">{cat.title}</CardBody>\n        </Card>\n    </div>\n));\n\n// Display the respective message for Loading or errors\nconst Play = ({ appProps }) => {\n    if (appProps.cats.isLoading)\n        return (<div className=\"row\"> <Loading msg=\"Categories\" /> </div>);\n\n    if (appProps.catQAs.isLoading)\n        return (<div className=\"row\"> <Loading msg=\"Categories Questions\" /> </div>);\n\n    if (appProps.cats.errMess) {\n        return (\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h4>{appProps.qas.errMess}</h4>\n                </div>\n            </div>\n        );\n    }\n\n    // generate the table of the game board\n    const results = [];\n    for (let r = 0; r < 5; r++) {\n        for (let c = 0; c < 6; c++) {\n            const catId = appProps.cats.cats[c].id;\n            if (appProps.catQAs) {\n                const qas = appProps.catQAs.catQAs['c' + catId];\n                if (qas && qas[r]) {\n                    const val = (r + 1) * 200;\n                    let i = 0;\n                    while (i < qas.length && qas[i].value !== val) i++;\n                    if (i < qas.length)\n                        results.push((<RenderQAItem key={'c' + c + 'r' + r} catId={catId} row={i} qa={qas[i]} />));\n                }\n            }\n        };\n    }\n\n    // Define the first row for categories, and the rest as questions\n    return (\n        <div className=\"playBoard\">\n            <div className=\"categoryBar row\">\n                <CategoryBar cats={appProps.cats.cats}></CategoryBar>\n            </div>\n            <div className=\"row\">\n                {results}\n            </div>\n        </div>\n    );\n}\n\nexport default Play;","// Pretty-prints the date as MM/DD/YYYY\nexport const getFormattedDate = date => {\n    const year = date.getFullYear();\n    const month = (1 + date.getMonth()).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    return month + '/' + day + '/' + year;\n};","import React from 'react';\nimport { Card, CardHeader, CardBody } from 'reactstrap';\nimport { getFormattedDate } from '../shared/helper';\n\n/**  Display the question, answer, category, value, air date of a particular card\n * after the user selected it in Search or Play\n **/\nfunction RenderQA({ qa }) {\n    return (\n        <Card className=\"detailCard\">\n            <CardHeader className=\"detailCategory\"><b>{qa.question}</b></CardHeader>\n            <CardBody className=\"detail\">\n                <dl className=\"row p-1\">\n                    <dt className=\"col-6\">Answer</dt>\n                    <dd className=\"col-6\"><b>{qa.answer}</b></dd>\n                    <dt className=\"col-6\">Category</dt>\n                    <dd className=\"col-6\">{qa.category.title}</dd>\n                    <dt className=\"col-6\">Value</dt>\n                    <dd className=\"col-6\">{qa.value}</dd>\n                    <dt className=\"col-6\">Air Date</dt>\n                    <dd className=\"col-6\">{getFormattedDate(qa.airdate)}</dd>\n                </dl>\n            </CardBody>\n        </Card>\n    );\n}\n\nconst QADetail = props =>\n    (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"question col-12\">\n                    <RenderQA qa={props.qa} />\n                </div>\n            </div>\n        </div>\n    );\n\nexport default QADetail;","import React, { Component } from 'react';\nimport { Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\n//Site-wide header\nclass Header extends Component {\n    constructor(props) {\n        super(props);\n        this.toggleNav = this.toggleNav.bind(this);\n        this.state = { isNavOpen: false };\n    }\n\n    //Mobile friendly: transform nav buttons into a hamburger menu on narrower screens\n    toggleNav() { this.setState({ isNavOpen: !this.state.isNavOpen }); }\n\n    //display the logo and tabs for Search and Play\n    render() {\n        return (\n            <Navbar dark expand=\"md\" fixed=\"top\" >\n                <NavbarToggler onClick={this.toggleNav} />\n                <NavbarBrand className=\"mr-auto\" href=\"/jeopardy/\"><img className='logo' src='./assets/images/logo.png' alt='Jeopardy!' /></NavbarBrand>\n                <Collapse isOpen={this.state.isNavOpen} navbar>\n                    <Nav navbar>\n                        <NavItem>\n                            <NavLink className=\"nav-link\" to='/search'><span className=\"fa fa-search fa-lg\"></span> Search</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink className=\"nav-link\" to='/play'><span className=\"fa fa-gamepad fa-lg\"></span> Play</NavLink>\n                        </NavItem>\n                    </Nav>\n                </Collapse>\n            </Navbar>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\n\n// Footer of web app\nfunction Footer(props) {\n    return (\n        <div className=\"footer\">\n            <div className=\"row justify-content-center\">\n                <div className=\"col-auto\">\n                    <p>Developed by Rachel Lu</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Footer;","//server for development\nexport const baseUrl = 'http://localhost:3001/';\n//use cors-anywhere to convert jservice to an https site (required for gh-pages)\nexport const serviceUrl = 'https://cors-anywhere.herokuapp.com/http://jservice.io/';","import * as ActionTypes from './ActionTypes';\nimport { serviceUrl } from '../shared/baseUrl';\nimport { getFormattedDate } from '../shared/helper';\n\n// Call the jService API to get the corresponding questions based on the search query\nexport const fetchQAs = (f) => (dispatch) => {\n  dispatch(qasLoading(true));\n  let url = serviceUrl + 'api/clues?' +\n    'offset=' + ((f && f.offset) || 0) +\n    (f.catId ? '&category=' + f.catId : '') +\n    (f.value ? '&value=' + f.value : '') +\n    (f.startDate && f.endDate ? // work around a bug in jService.io where min/max date is flipped if only 1 of them is specified\n      '&min_date=' + getFormattedDate(f.startDate) + '&max_date=' + getFormattedDate(f.endDate) :\n      ((f.startDate ? '&max_date=' + getFormattedDate(f.startDate) : '') +\n        (f.endDate ? '&min_date=' + getFormattedDate(f.endDate) : ''))\n    );\n  console.log(\"fetchQAs: \", url, f);\n  return fetch(url)\n    .then(response => {\n      if (response.ok) {\n        return response;\n      }\n      var error = new Error('Fetching questions error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      })\n    .then(response => response.json())\n    .then(qas => qas.filter(qa => qa.question !== '' && qa.value))\n    .then(qas => dispatch(addQAs(f, qas)))\n    .catch(error => dispatch(qasFailed(error.message)));\n}\n\n// Get a random set of categories for Play, given that it contains valid questions\nexport const fetchCats = (n) => (dispatch) => {\n  dispatch(catLoading(true));\n  const offset = Math.random() * 1000;\n  return fetch(serviceUrl + 'api/categories?offset=' + offset + '&count=' + (n ? n : 100))\n    .then(response => {\n      if (response.ok) {\n        return response;\n      }\n      var error = new Error('Fetching categories error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      })\n    .then(response => response.json())\n    .then(cats => {\n      const c = cats.sort((a, b) => a.clues_count < b.clues_count ? 1 : -1).slice(0, 6); /* choose first 6 */\n      c.map((cat) => dispatch(fetchCatQAs(cat.id))); /* fetch q's for the cats */\n      return dispatch(addCats(c));\n    })\n    .catch(error => dispatch(qasFailed(error.message)));\n}\n\n// Helper function for [fetchCats] that retrives the questions for the category\nexport const fetchCatQAs = (catId) => (dispatch) => {\n  return fetch(serviceUrl + 'api/clues?category=' + catId)\n    .then(response => {\n      if (response.ok) {\n        return response;\n      }\n      var error = new Error('Fetching categories question error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      })\n    .then(response => response.json())\n    .then(qas => dispatch(addCatQAs(catId, qas)))\n    .catch(error => dispatch(qasFailed(error.message)));\n}\n\nexport const qasLoading = (f) => ({ type: ActionTypes.QAS_LOADING, payload: f });\nexport const qasFailed = (errmess) => ({ type: ActionTypes.QAS_FAILED, payload: errmess });\nexport const addQAs = (f, q) => ({ type: ActionTypes.QAS_ADD, payload: { ...f, qas: q } });\n\nexport const catLoading = (f) => ({ type: ActionTypes.CAT_LOADING, payload: f });\nexport const catFailed = (errmess) => ({ type: ActionTypes.CAT_FAILED, payload: errmess });\nexport const addCats = (cats) => ({ type: ActionTypes.CAT_ADD, payload: cats });\n\nexport const catQAsLoading = (f) => ({ type: ActionTypes.CAT_QAS_LOADING, payload: f });\nexport const catQAsFailed = (errmess) => ({ type: ActionTypes.CAT_QAS_FAILED, payload: errmess });\nexport const addCatQAs = (catId, qas) => ({ type: ActionTypes.CAT_QAS_ADD, catId: catId, payload: qas });","export const QAS_LOADING = 'QAS_LOADING';\nexport const QAS_FAILED = 'QAS_FAILED';\nexport const QAS_ADD = 'QAS_ADD';\n\nexport const CAT_LOADING = 'CAT_LOADING';\nexport const CAT_FAILED = 'CAT_FAILED';\nexport const CAT_ADD = 'CAT_ADD';\n\nexport const CAT_QAS_LOADING = 'CAT_QAS_LOADING';\nexport const CAT_QAS_FAILED = 'CAT_QAS_FAILED';\nexport const CAT_QAS_ADD = 'CAT_QAS_ADD';","import React, { Component } from 'react';\nimport Search from './SearchComponent';\nimport Play from './PlayComponent';\nimport QADetail from './QADetailComponent';\nimport Header from './HeaderComponent';\nimport Footer from './FooterComponent';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { fetchQAs, fetchCats } from '../redux/ActionCreators';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\n// Shorten the naming conventions\nconst mapStateToProps = state => ({\n  qas: state.qas,\n  cats: state.cats,\n  catQAs: state.catQAs\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchQAs: (f) => dispatch(fetchQAs(f)),\n  fetchCats: () => dispatch(fetchCats())\n});\n\n// Connects all the components to gether into a cohesive site\nclass Main extends Component {\n\n  componentDidMount() {\n    this.props.fetchQAs(0);\n    this.props.fetchCats();\n  }\n\n  // display the desired page accordingly\n  render() {\n    const SearchPage = () => (\n      <Search appProps={this.props} />\n    );\n\n    const PlayPage = () => (\n      <Play appProps={this.props} />\n    );\n\n    // Display the details of a selected card on the search page\n    const QADetailPage = ({ match }) => (\n      <QADetail qa={this.props.qas.data.filter((qa) => qa.id === parseInt(match.params.qaId, 10))[0]}\n        isLoading={this.props.qas.isLoading}\n        errMess={this.props.qas.errMess}\n      />\n    );\n\n    // Display the details of a selected card on the play page\n    const PlayQADetailPage = ({ match }) => (\n      <QADetail qa={this.props.catQAs.catQAs['c' + match.params.catId][match.params.row]}\n        isLoading={this.props.catQAs.isLoading}\n        errMess={this.props.catQAs.errMess}\n      />\n    );\n\n    // Display the correct page based on the URL. The default page is Search\n    return (\n      <div>\n        <Header />\n        <TransitionGroup>\n          <CSSTransition key={this.props.location.key} classNames=\"page\" timeout={300}>\n            <Switch location={this.props.location}>\n              <Route exact path='/search' component={SearchPage} />\n              <Route path='/search/:qaId' component={QADetailPage} />\n              <Route exact path='/play' component={PlayPage} />\n              <Route path='/play/:catId/:row' component={PlayQADetailPage} />\n              <Redirect to='/search' />\n            </Switch>\n          </CSSTransition>\n        </TransitionGroup>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","import * as ActionTypes from './ActionTypes';\n\nexport const QAs = (state = { isLoading: true }, action) => {\n    switch (action.type) {\n        case ActionTypes.QAS_LOADING: \n            return {...state, isLoading: action.payload, errMess: null};\n        case ActionTypes.QAS_FAILED: \n            return {...state, isLoading: false, errMess: action.payload};\n        case ActionTypes.QAS_ADD: \n            const oldQs = action.payload.offset>0 && state.data ? state.data : [];\n            const newQs = action.payload.qas.map((q) => ({...q, airdate: new Date(q.airdate)}));\n            action.payload.qas = null;\n            return {...state, \n                isLoading: false, \n                errMess: null, \n                ...action.payload,\n                data: oldQs.concat(newQs)\n            };\n        default:\n            return state;\n    }\n};\n\nexport const Cats = (state = { isLoading: true, cats:[]}, action) => {\n    switch (action.type) {\n        case ActionTypes.CAT_LOADING: \n            return {...state, isLoading: action.payload, errMess: null};\n        case ActionTypes.CAT_FAILED: \n            return {...state, isLoading: false, errMess: action.payload};\n        case ActionTypes.CAT_ADD: \n            return { ...state, isLoading: false, errMess: null, cats: action.payload };\n        default:\n            return state;\n    }\n};\n\nexport const CatQAs = (state = { isLoading: true, catQAs:[]}, action) => {\n    switch (action.type) {\n        case ActionTypes.CAT_QAS_LOADING: \n            return {...state, isLoading: action.payload, errMess: null};\n        case ActionTypes.CAT_QAS_FAILED: \n            return {...state, isLoading: false, errMess: action.payload};\n        case ActionTypes.CAT_QAS_ADD: \n            const qas = state.catQAs;\n            qas[\"c\"+action.catId] = action.payload\n            .filter((a)=>a.value>0)\n            .sort((a,b)=>(a.value>b.value?1:-1))\n            .map((q) => ({...q, airdate: new Date(q.airdate)}));\n            return {...state, isLoading: false, errMess: null, catQAs: qas};\n        default:\n            return state;\n    }\n};","import React, { Component } from 'react';\nimport Main from './components/MainComponent';\nimport './App.css';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\n\nconst store = ConfigureStore();\n\n// Create the web app \nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <HashRouter>\n          <div className=\"App\">\n            <Main />\n          </div>\n        </HashRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { QAs, Cats, CatQAs } from './reducers';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\n// Store a redux setup\nexport const ConfigureStore = () => {\n    const store = createStore(\n        combineReducers({\n            qas: QAs,\n            cats: Cats,\n            catQAs: CatQAs\n        }),\n        applyMiddleware(thunk, logger)\n    );\n\n    return store;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport 'font-awesome/css/font-awesome.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}