{"version":3,"sources":["components/LoadingComponent.js","components/SearchComponent.js","components/QADetailComponent.js","components/HeaderComponent.js","components/FooterComponent.js","redux/ActionCreators.js","redux/ActionTypes.js","components/MainComponent.js","redux/qas.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["Loading","className","RenderQAItem","qa","onClick","to","id","question","Search","props","results","qas","filter","map","key","isLoading","errMess","RenderQA","answer","value","category","title","airdate","QADetail","console","log","Header","state","isNavOpen","toggleNav","bind","this","setState","dark","expand","href","isOpen","navbar","Component","Footer","qasLoading","type","qasFailed","errmess","payload","addQAs","Main","dishId","selectedDish","fetchQAs","location","classNames","timeout","exact","path","component","qaId","onQASelect","selectedQa","match","parseInt","params","withRouter","connect","dispatch","fetch","serviceUrl","mode","then","response","ok","error","Error","status","statusText","message","json","catch","QAs","action","store","createStore","combineReducers","applyMiddleware","thunk","logger","App","basename","process","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9312662.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Loading = () => {\n    return(\n        <div className=\"col-12\">\n            <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\"></span>\n            <p>Loading . . .</p>\n        </div>\n    );\n};","import React from 'react';\nimport { Card, CardBody, CardTitle } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { Loading } from './LoadingComponent';\n\nfunction RenderQAItem ({qa, onClick}) {\n    return (\n        <Card>\n            <Link to={`/search/${qa.id}`} >\n                <CardBody>\n                    <CardTitle>{qa.question}</CardTitle>\n                </CardBody>\n            </Link>\n        </Card>\n    );\n}\n\nconst Search = (props) => {\n    const results = props.qas.qas\n        .filter((qa) => qa.question!=='')\n        .map((qa) => {\n        return (\n            <div className=\"question col-lg-3 col-md-6 col-12\"  key={qa.id}>\n                <RenderQAItem qa={qa} onClick={props.onClick} />\n            </div>\n        );\n    });\n\n    if (props.qas.isLoading) {\n        return(\n            <div className=\"container\">\n                <div className=\"xxxrow\">            \n                    <Loading />\n                </div>\n            </div>\n        );\n    }\n    if (props.qas.errMess) {\n        return(\n            <div className=\"container\">\n                <div className=\"row\"> \n                    <div className=\"col-12\">\n                        <h4>{props.qas.errMess}</h4>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                {results}\n            </div>\n        </div>\n    );\n}\n\nexport default Search;","import React from 'react';\nimport { Card, CardBody, CardTitle } from 'reactstrap';\nimport { Loading } from './LoadingComponent';\n\nfunction RenderQA({qa}) {\n    return (\n        /*<FadeTransform in transformProps={{ exitTransform: 'scale(0.5) translateY(-50%)' }}>*/\n            <Card>\n                <CardBody>\n                    <CardTitle>Question: {qa.question}</CardTitle>\n                    Answer: {qa.answer} \n                    <hr/>\n                    <ul>\n                    <li>Value: {qa.value}</li>\n                    <li>Category: {qa.category.title}</li>\n                    <li>Air Date: {qa.airdate}</li>\n                    </ul>\n                </CardBody>\n            </Card>\n        /*</FadeTransform> */\n    );\n}\n\nconst QADetail = props => {\n    if (props.isLoading) {\n        return(\n            <div className=\"container\">\n                <div className=\"row\">            \n                    <Loading />\n                </div>\n            </div>\n        );\n    }\n\n    if (props.errMess) {\n        return(\n            <div className=\"container\">\n                <div className=\"row\">            \n                    <h4>{props.errMess}</h4>\n                </div>\n            </div>\n        );\n    }\n\n    console.log(props);\n    let qa = props.qa;\n    if (qa == null)\n        return( <div></div> );\n\n    return (\n        <div className=\"container\">\n        <div className=\"row\">\n            <div className=\"question col-12\">\n                <RenderQA qa={props.qa} />\n            </div>\n        </div>\n        </div>\n    );\n}\n\nexport default QADetail;","import React, { Component } from 'react';\nimport { Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nclass Header extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isNavOpen: false\n        };\n        this.toggleNav = this.toggleNav.bind(this);\n    }\n\n    toggleNav() {\n        this.setState({\n          isNavOpen: !this.state.isNavOpen\n        });\n    }\n\n    render() {\n        return(\n            <div>\n                <Navbar dark expand=\"md\">\n                    <div className=\"container\">\n                        <NavbarToggler onClick={this.toggleNav} />\n                        <NavbarBrand className=\"mr-auto\" href=\"/\"><b>Jeopardy!</b></NavbarBrand>\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\n                            <Nav navbar>\n                            <NavItem>\n                                <NavLink className=\"nav-link\" to='/search'><span className=\"fa fa-info fa-lg\"></span> Search</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink className=\"nav-link\"  to='/play'><span className=\"fa fa-list fa-lg\"></span> Play</NavLink>\n                            </NavItem>\n                            </Nav>\n                        </Collapse>\n                    </div>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\n\nfunction Footer(props) {\n    return (\n        <div className=\"footer\">\n                <div className=\"row justify-content-center\">             \n                    <div className=\"col-auto\">\n                        <p>© Copyright 2019 Rachel Lu</p>\n                    </div>\n                </div>\n        </div>\n    )\n}\n\nexport default Footer;","import * as ActionTypes from './ActionTypes';\nimport { serviceUrl } from '../shared/baseUrl';\n\nexport const fetchQAs = () => (dispatch) => {\n\n  dispatch(qasLoading(true));\n\n  return fetch(serviceUrl + 'api/clues', {\n    mode: 'cors'\n  })\n    .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      })\n    .then(response => response.json())\n    .then(qas => dispatch(addQAs(qas)))\n    .catch(error => dispatch(qasFailed(error.message)));\n}\n\nexport const qasLoading = () => ({\n  type: ActionTypes.QAS_LOADING\n});\n\nexport const qasFailed = (errmess) => ({\n  type: ActionTypes.QAS_FAILED,\n  payload: errmess\n});\n\nexport const addQAs = (qas) => ({\n  type: ActionTypes.ADD_QAS,\n  payload: qas\n});","export const QAS_LOADING = 'QAS_LOADING';\nexport const QAS_FAILED = 'QAS_FAILED';\nexport const ADD_QAS = 'ADD_QAS';","import React, { Component } from 'react';\nimport Search from './SearchComponent';\nimport QADetail from './QADetailComponent';\nimport Header from './HeaderComponent';\nimport Footer from './FooterComponent';\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { fetchQAs } from '../redux/ActionCreators';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nconst mapStateToProps = state => {\n  return {\n    qas: state.qas\n  }\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchQAs: () => { dispatch(fetchQAs()); }\n});\n\nclass Main extends Component {\n\n  onDishSelect(dishId) {\n    this.setState({ selectedDish: dishId });\n  }\n\n  componentDidMount() {\n    this.props.fetchQAs();\n  }\n\n  render() {\n    const SearchPage = () => (\n      <div className=\"container\">\n        <Search qas={this.props.qas} onClick={(qaId) => this.onQASelect(qaId)} />\n        <QADetail qa={this.props.qas.qas.filter((qa) => qa.id === this.props.selectedQa)[0]} />\n      </div>\n    );\n\n    const QAWithIdPage = ({ match }) => (\n      <QADetail qa={this.props.qas.qas.filter((qa) => qa.id === parseInt(match.params.qaId, 10))[0]}\n        isLoading={this.props.qas.isLoading}\n        errMess={this.props.qas.errMess}\n      />\n    );\n\n    return (\n      <div>\n        <Header />\n        <TransitionGroup>\n          <CSSTransition key={this.props.location.key} classNames=\"page\" timeout={300}>\n            <Switch location={this.props.location}>\n              <Route exact path='/search' component={SearchPage} />\n              <Route path='/search/:qaId' component={QAWithIdPage} />\n              <Redirect to=\"/search\" />\n            </Switch>\n          </CSSTransition>\n        </TransitionGroup>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","import * as ActionTypes from './ActionTypes';\n\nexport const QAs = (state = { isLoading: true,\n    errMess: null,\n    qas:[]}, action) => {\n    switch (action.type) {\n        case ActionTypes.ADD_QAS:\n            return {...state, isLoading: false, errMess: null, qas: action.payload};\n\n        case ActionTypes.QAS_LOADING:\n            return {...state, isLoading: true, errMess: null, qas: []}\n\n        case ActionTypes.QAS_FAILED:\n            return {...state, isLoading: false, errMess: action.payload};\n\n        default:\n            return state;\n    }\n};","import React, { Component } from 'react';\nimport Main from './components/MainComponent';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\n\nconst store = ConfigureStore();\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <div className=\"App\">\n            <Main />\n          </div>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { QAs } from './qas';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nexport const ConfigureStore = () => {\n    const store = createStore(\n        combineReducers({\n            qas: QAs\n        }),\n        applyMiddleware(thunk, logger)\n    );\n\n    return store;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport 'font-awesome/css/font-awesome.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}>\n  <App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}